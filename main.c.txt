#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Funcție pentru a găsi valoarea maximă care poate fi obținută
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Funcție care implementează problema Knapsack
int knapsack(int capacity, int sizes[], int values[], int n) {
    int i, w;
    int **K = (int **)malloc((n + 1) * sizeof(int *));
    for (i = 0; i <= n; i++) {
        K[i] = (int *)malloc((capacity + 1) * sizeof(int));
    }

    // Construim tabelul K[][] într-o manieră bottom-up
    for (i = 0; i <= n; i++) {
        for (w = 0; w <= capacity; w++) {
            if (i == 0 || w == 0)
                K[i][w] = 0;
            else if (sizes[i - 1] <= w)
                K[i][w] = max(values[i - 1] + K[i - 1][w - sizes[i - 1]], K[i - 1][w]);
            else
                K[i][w] = K[i - 1][w];
        }
    }

    int result = K[n][capacity];

    for (i = 0; i <= n; i++) {
        free(K[i]);
    }
    free(K);

    return result;
}

// Funcție pentru generarea de date aleatorii
void generate_random_data(int size, int max_value, int max_dimension, int sizes[], int values[]) {
    for (int i = 0; i < size; i++) {
        sizes[i] = rand() % max_dimension + 1;
        values[i] = rand() % max_value + 1;
    }
}

int main() {
    int size = 1000;  // sau 10000, 100000, etc.
    int max_value = 100;
    int max_dimension = 100;
    int capacity = 1000;  // capacitatea plasei

    int *sizes = (int *)malloc(size * sizeof(int));
    int *values = (int *)malloc(size * sizeof(int));

    srand(time(0));  // inițializare generator de numere aleatorii

    generate_random_data(size, max_value, max_dimension, sizes, values);

    printf("Valoarea maximă a capturii: %d\n", knapsack(capacity, sizes, values, size));

    free(sizes);
    free(values);

    return 0;
}
